<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>тест Лог-Файлов</title>
  <link href="https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap" rel="stylesheet" />
  <style>
    * { box-sizing: border-box; }
    body {
      font-family: 'Roboto', sans-serif;
      background-color: #121212;
      color: #f0f0f0;
      margin: 0;
      display: flex;
      min-height: 100vh;
      flex-direction: column;
      transition: background-color 0.3s, color 0.3s;
    }
    .app-container {
      display: flex;
      flex: 1;
      animation: fadeIn 0.6s ease forwards;
      flex-direction: row;
    }
    #left-panel, #right-panel {
      padding: 24px;
      display: flex;
      flex-direction: column;
      animation-duration: 0.6s;
      animation-timing-function: ease;
      animation-fill-mode: forwards;
    }
    #left-panel {
      background-color: #1e1e1e;
      width: 320px;
      box-shadow: 2px 0 8px rgba(0,0,0,0.3);
      animation-name: slideInLeft;
    }
    #right-panel {
      flex: 1;
      background-color: #121212;
      animation-name: slideInRight;
    }
    h2 {
      font-size: 1.6rem;
      margin-bottom: 24px;
      color: #90caf9;
    }
    label {
      margin-bottom: 8px;
      display: block;
      color: #b0bec5;
    }
    input[type="file"] {
      display: none;
    }
    .file-label, .btn {
      display: inline-block;
      padding: 10px 16px;
      margin-bottom: 16px;
      background-color: #1976d2;
      color: white;
      border-radius: 6px;
      cursor: pointer;
      font-size: 1rem;
      transition: background-color 0.3s ease;
      user-select: none;
      text-align: center;
      border: none;
    }
    .file-label:hover, .btn:hover {
      background-color: #1565c0;
    }
    select {
      width: 100%;
      padding: 10px;
      margin-bottom: 16px;
      border: none;
      border-radius: 4px;
      background-color: #2c2c2c;
      color: #f0f0f0;
      font-size: 1rem;
    }
    #output-text {
      flex: 1;
      padding: 16px;
      background-color: #1e1e1e;
      border-radius: 8px;
      overflow-y: auto;
      white-space: pre-wrap;
      font-size: 15px;
      line-height: 1.4;
      user-select: text;
    }
    #output-text span {
      display: block;
      opacity: 0;
      animation: fadeInText 0.5s forwards;
      cursor: pointer;
      transition: color 0.3s ease, transform 0.2s ease, background-color 0.3s ease;
      padding: 4px 8px;
      border-radius: 6px;
    }
    #output-text span:hover {
      color: #90caf9 !important;
      transform: translateX(5px);
      background-color: rgba(144, 202, 249, 0.15);
    }
    #output-text span.active {
      color: #42a5f5 !important;
      background-color: rgba(66, 165, 245, 0.25);
      transform: scale(0.98);
    }
    #copy-toast {
      position: fixed;
      bottom: 30px;
      right: 30px;
      background-color: #4caf50;
      color: white;
      padding: 12px 20px;
      border-radius: 8px;
      font-size: 15px;
      opacity: 0;
      pointer-events: none;
      transition: opacity 0.5s ease, transform 0.5s ease;
      z-index: 99999;
      transform: translateY(20px);
    }
    #copy-toast.show {
      opacity: 1;
      transform: translateY(0);
    }
    body.light-theme {
      background-color: #f4f4f4;
      color: #1e1e1e;
    }
    body.light-theme #left-panel,
    body.light-theme #right-panel {
      background-color: #fff;
    }
    body.light-theme h2 {
      color: #1976d2;
    }
    body.light-theme label {
      color: #333;
    }
    body.light-theme select {
      background-color: #eee;
      color: #1e1e1e;
    }
    body.light-theme #output-text {
      background-color: #f9f9f9;
    }
    body.light-theme .btn, body.light-theme .file-label {
      background-color: #1976d2;
      color: white;
    }
    .corner-gradient {
      position: fixed;
      bottom: 10px;
      left: 10px;
      padding: 6px 14px;
      border-radius: 12px;
      background: linear-gradient(270deg, #42a5f5, #ab47bc, #66bb6a, #ffee58, #42a5f5);
      background-size: 600% 600%;
      animation: gradientFlow 8s ease infinite;
      font-size: 14px;
      font-weight: 500;
      color: #fff;
      box-shadow: 0 0 10px rgba(0,0,0,0.3);
      z-index: 9999;
      user-select: none;
    }
    /* Новый стиль для оверлея уведомления */
    #update-notification {
      position: fixed;
      top: 0; left: 0; right: 0; bottom: 0;
      background-color: rgba(18, 18, 18, 0.9);
      display: flex;
      align-items: center;
      justify-content: center;
      z-index: 100000;
      visibility: hidden;
      opacity: 0;
      transition: opacity 0.3s ease;
    }
    #update-notification.show {
      visibility: visible;
      opacity: 1;
    }
    #update-box {
      background-color: #1e1e1e;
      padding: 24px 32px;
      border-radius: 12px;
      box-shadow: 0 0 20px rgba(66, 165, 245, 0.6);
      max-width: 400px;
      text-align: center;
      color: #90caf9;
      font-size: 1.1rem;
      user-select: none;
    }
    #update-box p {
      margin-bottom: 24px;
    }
    #update-box button {
      background-color: #1976d2;
      border: none;
      color: white;
      padding: 10px 16px;
      margin: 0 8px;
      border-radius: 6px;
      cursor: pointer;
      font-size: 1rem;
      transition: background-color 0.3s ease;
    }
    #update-box button:hover {
      background-color: #1565c0;
    }

    @keyframes fadeInText {
      from {opacity: 0; transform: translateY(10px);}
      to {opacity: 1; transform: translateY(0);}
    }
    @keyframes fadeIn {
      from {opacity: 0;}
      to {opacity: 1;}
    }
    @keyframes slideInLeft {
      from {opacity: 0; transform: translateX(-30px);}
      to {opacity: 1; transform: translateX(0);}
    }
    @keyframes slideInRight {
      from {opacity: 0; transform: translateX(30px);}
      to {opacity: 1; transform: translateX(0);}
    }
    @keyframes gradientFlow {
      0% {background-position: 0% 50%;}
      50% {background-position: 100% 50%;}
      100% {background-position: 0% 50%;}
    }
    @media (max-width: 768px) {
      .app-container { flex-direction: column; }
      #left-panel, #right-panel {
        width: 100%;
        padding: 16px 12px;
        box-shadow: none;
      }
      #output-text { font-size: 14px; }
      #update-box {
        max-width: 90%;
        padding: 20px;
      }
    }
  </style>
</head>
<body>
  <div class="app-container">
    <div id="left-panel">
      <h2>Управление</h2>
      <label for="file-input" class="file-label">Выбрать файл</label>
      <input type="file" id="file-input" accept=".txt" />
      <label for="action-select">Выберите действие:</label>
      <select id="action-select">
        <option>Все действия</option>
        <option>Принял игрока в организацию</option>
        <option>Уволил игрока</option>
        <option>Подтверждает участие на мероприятие фракции</option>
        <option>Изменил ранг игрока</option>
        <option>Установил игроку тег</option>
        <option>Открыл склад организации</option>
        <option>Выдал материалы с склада организации</option>
        <option>Выгнал игрока из организации</option>
        <option>Изменил реквизиты банка</option>
        <option>Изменил налог организации</option>
      </select>
    </div>
    <div id="right-panel">
      <h2>Лог</h2>
      <pre id="output-text" spellcheck="false"></pre>
    </div>
  </div>

  <div id="copy-toast">Текст скопирован в буфер обмена!</div>

  <div class="corner-gradient">ABCheck v1.1</div>

  <!-- Окно уведомления об обновлении -->
  <div id="update-notification">
    <div id="update-box">
      <p>Доступна новая версия. Перезагрузить сейчас?</p>
      <button id="btn-update-yes">Да</button>
      <button id="btn-update-no">Нет</button>
    </div>
  </div>

  <script>
    const fileInput = document.getElementById('file-input');
    const actionSelect = document.getElementById('action-select');
    const outputText = document.getElementById('output-text');
    const copyToast = document.getElementById('copy-toast');

    let logData = [];

    function renderOutput() {
      outputText.innerHTML = '';
      const filter = actionSelect.value;
      let filtered = logData;
      if (filter && filter !== 'Все действия') {
        filtered = logData.filter(line => line.includes(filter));
      }
      filtered.forEach((line, index) => {
        const span = document.createElement('span');
        span.textContent = line;
        span.style.animationDelay = (index * 50) + 'ms';
        span.addEventListener('click', () => {
          navigator.clipboard.writeText(line).then(() => {
            showCopyToast();
          });
        });
        outputText.appendChild(span);
      });
    }

    actionSelect.addEventListener('change', () => {
      renderOutput();
    });

    fileInput.addEventListener('change', (e) => {
      const file = e.target.files[0];
      if (!file) return;
      const reader = new FileReader();
      reader.onload = (e) => {
        const text = e.target.result;
        logData = text.split('\n').filter(line => line.trim() !== '');
        renderOutput();
        checkForUpdates(); // Проверка обновлений после загрузки файла
      };
      reader.readAsText(file);
    });

    function showCopyToast() {
      copyToast.classList.add('show');
      setTimeout(() => {
        copyToast.classList.remove('show');
      }, 2000);
    }

    // --- Проверка обновлений ---
    const CURRENT_VERSION = '1.1';
    const GITHUB_RAW_URL = 'https://raw.githubusercontent.com/filedelete/Arzabcheck/main/abcheck.txt';

    const updateNotification = document.getElementById('update-notification');
    const btnYes = document.getElementById('btn-update-yes');
    const btnNo = document.getElementById('btn-update-no');

    async function checkForUpdates() {
      try {
        const response = await fetch(GITHUB_RAW_URL + '?t=' + Date.now());
        if (!response.ok) throw new Error('Ошибка загрузки файла обновления');
        const text = await response.text();
        const lines = text.split('\n').filter(l => l.trim() !== '');
        if (lines.length === 0) return;
        // Предполагается, что первая строка — версия
        const latestVersion = lines[0].trim();
        if (latestVersion !== CURRENT_VERSION) {
          showUpdateNotification();
        }
      } catch (e) {
        console.error('Ошибка проверки обновления:', e);
      }
    }

    function showUpdateNotification() {
      updateNotification.classList.add('show');
    }

    btnYes.addEventListener('click', () => {
      location.reload(true);
    });

    btnNo.addEventListener('click', () => {
      updateNotification.classList.remove('show');
    });

    window.addEventListener('load', () => {
      checkForUpdates(); // Проверка обновления при загрузке страницы
    });
  </script>
</body>
</html>
